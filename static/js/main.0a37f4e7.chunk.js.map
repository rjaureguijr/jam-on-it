{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","redirectUri","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","window","location","href","match","Spotify","getAccessToken","accessTokenMatch","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","error","console","message","savePlaylist","trackUris","userId","length","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0a37f4e7.chunk.js","sourcesContent":["const clientId = 'a8ead8c973304813afd24b59880a2902';\nlet accessToken;\nlet redirectUri;\nredirectUri = window.location.href.match(/http:\\/\\/localhost:3000/) ?  'http://localhost:3000/' : 'https://rjaureguijr.github.io/jam-on-it/';\n\nconst Spotify = {\n    getAccessToken() {\n      if (accessToken) {\n        return accessToken;\n      }\n  \n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]);\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/'); \n        return accessToken;\n      } else {\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = accessUrl;\n      }\n    },\n  \n    search(term) {\n      const accessToken = Spotify.getAccessToken();\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      },\n      (error) => {\n        console.error(error.message);\n      });\n    },\n  \n    savePlaylist(name, trackUris) {\n      const accessToken = Spotify.getAccessToken();\n      const headers = { Authorization: `Bearer ${accessToken}` };\n      let userId;\n\n      if (!name || !trackUris.length) {\n        return;\n      }\n      return fetch('https://api.spotify.com/v1/me', {headers: headers})\n      .then(response => response.json())\n      .then(jsonResponse => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({name: name})\n        })\n        .then(response => response.json())\n        .then(jsonResponse => {\n          const playlistId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({uris: trackUris})\n          });\n        });\n      });\n    }\n  };\n  \n  export default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: ''\n        };\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    \n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    render() {\n        return (\n        <div className=\"SearchBar\">\n            <input placeholder=\"Enter A Song, Album, or Artist\" \n            onChange={this.handleTermChange} />\n            <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n        </div>\n        );\n    }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction () {\n        if (this.props.isRemoval) {\n            return (\n                <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n            );\n        } else {\n            return (\n                <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n            );\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    render () {\n        return (\n            <div className=\"Track\">\n            <div className=\"Track-information\">\n                <h3>{this.props.track.name}</h3>\n                <p><small>artist:</small> {this.props.track.artist} | <small>album:</small> {this.props.track.album}</p>\n            </div>\n            {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n            {\n                this.props.tracks.map((track) => {\n                    return <Track onAdd={this.props.onAdd} onRemove={this.props.onRemove} \n                isRemoval={this.props.isRemoval} track={track} key={track.id} />;\n                })\n            }\n            </div>\n        );\n    }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList onAdd={this.props.onAdd} \n                isRemoval={false} tracks={this.props.searchResults} />\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './Playlist.css'\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n        // alert(event.target.value);\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n            <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n            <TrackList isRemoval={true} onRemove={this.props.onRemove} tracks={this.props.playlistTracks} />\n            <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n          </div>\n        );\n    }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'Untitled Playlist',\n      playlistTracks: [] \n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState( {\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render() {\n      return (\n        <div>\n          <h1>Jam<span className=\"highlight\">On</span>It!</h1>\n          <div className=\"App\">\n            <SearchBar onSearch={this.search} />\n            <div className=\"App-playlist\">\n              <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults} />\n              <Playlist onRemove={this.removeTrack} \n              onNameChange={this.updatePlaylistName}\n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks} \n              onSave={this.savePlaylist} />\n            </div>\n          </div>\n      </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}